pipeline {
    agent any
    stages {
        stage('Get Code') {
            agent { label 'principal'}
            steps {
                git 'https://github.com/karbono/unir1-B'
                dir('C:\\Users\\lacei\\AppData\\Local\\Jenkins\\.jenkins\\workspace\\P24\\Caso1BFixed'){
                    stash (name: 'sourceCode')
                }
                stash name: 'flaskJMX', includes: 'test\\jmeter\\flask.jmx'
                bat '''
                    whoami
                    dir
                    hostname
                '''
            }
        }
        stage('ParallelTests'){
            parallel {
                stage('Cobertura') {
                    agent { label 'testing1'}
                    steps {
                        unstash 'sourceCode'
                        bat '''
                            whoami
                            dir
                            hostname
                            SET PYTHONPATH=%WORKSPACE%
                            coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                            coverage xml
                        '''
                        junit 'result-unit.xml'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90, 80, 90', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '95, 85, 90', maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
                        }
                    }
                }
                stage('Rest') {
                    agent { label 'testing2'}
                    steps {
                        unstash 'sourceCode'
                        bat '''
                            whoami
                            dir
                            hostname
                            SET PYTHONPATH=%WORKSPACE%
                            set FLASK_APP=app\\api.py
                            start /B flask run
                            start /B /wait timeout 5
                            start /B java -jar C:\\Users\\lacei\\Downloads\\wiremock-standalone-3.5.3.jar --port 9090 --root-dir test\\wiremock
                            start /B /wait timeout 5
                            pytest --junitxml=result-rest.xml test/rest
                        '''
                        }
                    }
                stage('Static') {
                    agent { label 'principal'}
                    steps {
                        bat '''
                            whoami
                            dir
                            hostname
                            flake8 --exit-zero --format=pylint app > flake8.out
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            recordIssues(
                                tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],
                                qualityGates: [
                                    [threshold: 8, type: 'TOTAL', unstable: true],
                                    [threshold: 10, type: 'TOTAL', unhealthy: true]
                                ]
                            )
                        }
                    }
                }
                stage('Security') {
                    agent { label 'testing1'}
                    steps {
                        bat '''
                            whoami
                            dir
                            hostname
                            bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            recordIssues(
                                tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],
                                qualityGates: [
                                    [threshold: 2, type: 'TOTAL', unstable: true],
                                    [threshold: 4, type: 'TOTAL', unhealthy: true]
                                ]
                            )
                        }
                    }
                }
                stage('Performance') {
                    agent { label 'testing2'}
                    steps {
                        unstash 'sourceCode'
                        bat '''
                            whoami
                            dir
                            hostname
                            C:\\Users\\lacei\\Downloads\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl' 
                        '''
                            perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }    
        }
    }
}
